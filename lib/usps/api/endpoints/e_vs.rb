# frozen_string_literal: true

# This file was auto-generated by lib/tasks/api.rake

module Usps
	module Api
		module Endpoints
			module EVS

				def e_vs(options = {})
					throw ArgumentError.new('Required arguments :e_vs_request missing') if options[:e_vs_request].nil?

					request = build_request(:e_vs, options)

					puts request.inspect
					puts "****"

					api = if options[:debug]
						'eVSCertify'
					else
						'eVS'
					end

					puts "api #{api}"
					response = get('https://secure.shippingapis.com/ShippingAPI.dll', {
						API: api,
						XML: request,
					})

					puts "** response"
					puts response.inspect

					raise response['eVSResponse']['Error'] if response['eVSResponse']['Error'].present?

					save_image(options[:path], Array(response['eVSResponse']['LabelImage']), response['eVSResponse']['BarcodeNumber'])
					response
				end

				private

				def tag_unless_blank(xml, tag_name, data)
					xml.tag!(tag_name, data) unless data.blank? || data.nil?
				end

				# 只实现了普通的境内单
				def build_e_vs_request(xml, options = {})
					tag_unless_blank(xml, 'Option', options[:e_vs_request][:option])
					tag_unless_blank(xml, 'Revision', options[:e_vs_request][:revision] || '1')
					xml.tag!('ImageParameters') do
						tag_unless_blank(xml, 'ImageParameter', options[:e_vs_request][:image_parameters][:image_parameter] || '4X6LABEL')
					end if options[:e_vs_request][:image_parameters].present?

					xml.tag!('FromName', options[:e_vs_request][:from_name])
					xml.tag!('FromFirm', options[:e_vs_request][:from_name])
					xml.tag!('FromAddress1', options[:e_vs_request][:from_address_1])
					xml.tag!('FromAddress2', options[:e_vs_request][:from_address_2])
					xml.tag!('FromCity', options[:e_vs_request][:from_city])
					xml.tag!('FromState', options[:e_vs_request][:from_state])
					xml.tag!('FromZip5', options[:e_vs_request][:from_zip_5])
					xml.tag!('FromZip4', options[:e_vs_request][:from_zip_4])
					xml.tag!('FromPhone', options[:e_vs_request][:from_phone])					
					xml.tag!('ToName', options[:e_vs_request][:to_name])
					xml.tag!('ToFirm', options[:e_vs_request][:to_name])
					xml.tag!('ToAddress1', options[:e_vs_request][:to_address_1])
					xml.tag!('ToAddress2', options[:e_vs_request][:to_address_2])
					xml.tag!('ToCity', options[:e_vs_request][:to_city])
					xml.tag!('ToState', options[:e_vs_request][:to_state])
					xml.tag!('ToZip5', options[:e_vs_request][:to_zip_5])
					xml.tag!('ToZip4', options[:e_vs_request][:to_zip_4])
					xml.tag!('ToPhone', options[:e_vs_request][:to_phone])
					xml.tag!('WeightInOunces', options[:e_vs_request][:weight_in_ounces])
					xml.tag!('ServiceType', options[:e_vs_request][:service_type])
					tag_unless_blank(xml, 'Width', options[:e_vs_request][:width])
					tag_unless_blank(xml,'Length', options[:e_vs_request][:length])
					tag_unless_blank(xml,'Height', options[:e_vs_request][:height])
					tag_unless_blank(xml, 'ShipDate', options[:e_vs_request][:ship_date])

					xml.tag!('ExtraServices') do 
						if options[:e_vs_request][:extra_services][:signature_options].present?
							xml.tag!('ExtraService', '109')
						end
					end if options[:e_vs_request][:extra_services].present?

					xml.tag!('ImageType', options[:e_vs_request][:image_type] || 'PDF')

					xml.target!
				end

			end
		end
	end
end
